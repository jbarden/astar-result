name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true

variables:
  # - group: DevConfig
  # Set the following variables in the 'DevConfig' variable group (creating if necessary). The name here and in ADO must match but can vary from the example here - please refer to the readMe for more details.
  # internalPackageFeedId: 'The GUID for the Azure DevOps Package feed.'
  # sonarQubeProjectName: 'The name of the SonarQube project.'
  # sonarQubeProjectKey: 'The key to access the SonarQube project.'
  # artifactName: 'The name for the created build artifact.'
  # sonarQubeConnection: 'The name of the SonarQube Service connection.'
  # The following are the defaults at the build level - please update if required
- name: projectsToBuild
  value: '**/*.csproj'
- name: testProjects
  value: '**/*Unit.Tests.csproj'
- name: solutionFileToBuild
  value: '**/*.sln'
- name: platform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: publishOutputDir
  value: $(Build.ArtifactStagingDirectory)
- name: codeCoverageReportDir
  value: $(Build.ArtifactStagingDirectory)/CoverageReport
- name: disable.coverage.autogenerate
  value: 'true' # see https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
- name: majorVersion
  value: 0
- name: minorVersion
  value: 0
- name: patch
  value: [counter(format('{0}.{1}', variables.majorVersion, variables.minorVersion), 0)]
- name: packageVersion
  value: $(majorVersion).$(minorVersion).$(patch)-alpha

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: DotNetCoreCLI@2
        displayName: Restore NuGet packages
        inputs:
          command: 'restore'
          projects: $(projectsToBuild)
          feedsToUse: 'select'
          includeNuGetOrg: true
          # vstsFeed: $(internalPackageFeedId)
          verbosityRestore: 'Normal'

      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: 'build'
          projects: $(solutionFileToBuild)
          arguments: '--nologo -c $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: dotnet publish
        inputs:
          command: 'publish'
          projects: '$(projectsToBuild)'
          publishWebProjects: false
          arguments: '--nologo -c $(buildConfiguration) -o $(publishOutputDir)'
          zipAfterPublish: false

      - task: DotNetCoreCLI@2
        displayName: Run Unit Tests
        continueOnError: false
        inputs:
          command: 'test'
          projects: '$(testProjects)'
          arguments: '--nologo -c $(buildConfiguration) --collect:"Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[*Test]*'
          publishTestResults: true

      # The following requires the test project includes both coverlet.collector and coverlet.msbuild or the task will fail "No file created".
      #- task: reportgenerator@4
      #  displayName: Generate Coverage Report
      #  inputs:
      #    reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
      #    targetdir: '$(codeCoverageReportDir)'

      #- task: PublishCodeCoverageResults@1
      #  displayName: Publish Code Coverage
      #  inputs:
      #    codeCoverageTool: 'Cobertura'
      #    summaryFileLocation: '$(codeCoverageReportDir)/Cobertura.xml'
      #    reportDirectory: $(codeCoverageReportDir)

      - task: NuGetCommand@2
        inputs:
          command: pack
          packagesToPack: '**/A.Star.csproj'
          versioningScheme: byEnvVar
          versionEnvVar: $(majorVersion).$(minorVersion).$(patch)$(packageVersion)
          packDestination: '$(Build.ArtifactStagingDirectory)\nugetpkg'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet pack $(buildConfiguration)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          command: custom
          projects: '**/*.csproj'
          custom: pack
          arguments: '/p:Configuration=$(buildConfiguration) --version:$(packageVersion) --no-build --include-symbols --output $(Build.ArtifactStagingDirectory)  --verbosity Detailed -p:SymbolPackageFormat=snupkg'

      - task: PublishBuildArtifacts@1
        displayName: Publish Build Artifacts for CI Build
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: $(artifactName)
          publishLocation: 'Container'