name: $(releaseNumber).$(minorVersion)$(rev:.r)
trigger:
  batch: true

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: DotNetCoreCLI@2
        displayName: Restore NuGet packages
        inputs:
          command: 'restore'
          projects: $(projectsToBuild)
          feedsToUse: 'select'
          includeNuGetOrg: true
          vstsFeed: $(internalPackageFeedId)
          verbosityRestore: 'Normal'

      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: 'build'
          projects: $(solutionFileToBuild)
          arguments: '--nologo -c $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: dotnet publish
        inputs:
          command: 'publish'
          projects: '$(projectsToBuild)'
          publishWebProjects: false
          arguments: '--nologo -c $(buildConfiguration) -o $(publishOutputDir)'
          zipAfterPublish: false

      - task: DotNetCoreCLI@2
        displayName: Run Unit Tests
        continueOnError: false
        inputs:
          command: 'test'
          projects: '$(testProjects)'
          arguments: '--nologo -c $(buildConfiguration) --collect:"Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[*Test]*'
          publishTestResults: true

      # The following requires the test project includes both coverlet.collector and coverlet.msbuild or the task will fail "No file created".
      - task: reportgenerator@4
        displayName: Generate Coverage Report
        inputs:
          reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
          targetdir: '$(codeCoverageReportDir)'

      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(codeCoverageReportDir)/Cobertura.xml'
          reportDirectory: $(codeCoverageReportDir)

      - task: DotNetCoreCLI@2
        displayName: 'dotnet pack $(buildConfiguration)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          command: custom
          projects: '**/*.csproj'
          custom: pack
          arguments: '/p:Configuration=$(buildConfiguration) --version:0.0.$(releaseNumber)-alpha --no-build --include-symbols --output $(Build.ArtifactStagingDirectory)  --verbosity Detailed -p:SymbolPackageFormat=snupkg'

      - task: PublishBuildArtifacts@1
        displayName: Publish Build Artifacts for CI Build
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: $(artifactName)
          publishLocation: 'Container'